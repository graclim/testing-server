import socket
import pygame
from pygame.locals import *
import time
import button

host = ''
port = 5580

def setupServer():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Socket created.")
    try:
        s.bind((host, port))
    except socket.error as msg:
        print(msg)
    print("Socket bind comlete.")
    return s

def setupConnection():
    s.listen(1) # Allows one connection at a time.
    conn, address = s.accept()
    print("Connected to: " + address[0] + ": " + str(address[1]))
    return conn

# def dataTransfer(conn):
#     # A big loop that sends/receives data until told not to.
#     while True:
#         # Receive the data
#         data = conn.recv(1024) # receive the data
#         data = data.decode('utf-8')
#         if data == 'EXIT':
#             print("client exited")
#             break
#         elif data == 'KILL':
#             print("program killed")
#             s.close()
#             break
#         elif data == 'w':
#             reply = "forward"
#         elif data == 'a':
#             reply = "left"
#         elif data == 'd':
#             reply = "right"
#         elif data == "u":
#             reply = "up"
#         elif data == "j":
#             reply = "down"
#         else:
#             reply = "unknown command"
#         # Send the reply back to the client
#         conn.sendall(str.encode(reply))
#         print("Data has been sent!")
#     conn.close()

# s = setupServer()

# def send_directions(direction, conn):
#     if direction == "left":
#         conn.sendall(str.encode("left"))
#     elif direction == "right":
#         conn.sendall(str.encode("right"))
#     elif direction == "forward":
#         conn.sendall(str.encode("forward"))
#     elif direction == "up":
#         conn.sendall(str.encode("up"))
#     elif direction == "down":
#         conn.sendall(str.encode("down"))

#create display window
SCREEN_HEIGHT = 500
SCREEN_WIDTH = 800

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Blimp Base Station")

#load button images
left_arrow_img = pygame.image.load('left_arrow.png').convert_alpha()
up_arrow_img = pygame.image.load('up_arrow.png').convert_alpha()
right_arrow_img = pygame.image.load('right_arrow.png').convert_alpha()
down_arrow_img = pygame.image.load('down_arrow.png').convert_alpha()

#create button instances
left_arrow = button.Button(100, 200, left_arrow_img, 1)
forward_arrow = button.Button(200, 200, up_arrow_img, 1)
right_arrow = button.Button(300, 200, right_arrow_img, 1)
up_arrow = button.Button(500, 200, up_arrow_img, 1)
down_arrow = button.Button(500, 300, down_arrow_img, 1)

def dataTransfer(conn):
    run = True
    while run:
            
        screen.fill((202, 228, 241))

        if left_arrow.draw(screen):
            print('LEFT')
            # send_directions("left", conn)
        if right_arrow.draw(screen):
            print('RIGHT')
            # send_directions("right", conn)
        if forward_arrow.draw(screen):
            print('FORWARD')
            # send_directions("forward", conn)
        if up_arrow.draw(screen):
            print('UP')
            # send_directions("up", conn)
        if down_arrow.draw(screen):
            print('DOWN')
            # send_directions("down", conn)

        # event handler
        for event in pygame.event.get():
            # quit game
            if event.type == pygame.QUIT:
                run = False

        pygame.display.update()

    pygame.quit()

while True:
    try:
        conn = setupConnection()
        dataTransfer(conn)
    except:
        break